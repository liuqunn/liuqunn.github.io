{"name": "test_abc", "status": "broken", "statusDetails": {"message": "TypeError: TestExample.test_abc() takes 0 positional arguments but 1 was given", "trace": "cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x00000189BEAA1B40>, when = 'call'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n..\\..\\venv\\lib\\site-packages\\_pytest\\runner.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\venv\\lib\\site-packages\\_pytest\\runner.py:255: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n..\\..\\venv\\lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n..\\..\\venv\\lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n..\\..\\venv\\lib\\site-packages\\_pytest\\runner.py:170: in pytest_runtest_call\n    raise e\n..\\..\\venv\\lib\\site-packages\\_pytest\\runner.py:162: in pytest_runtest_call\n    item.runtest()\n..\\..\\venv\\lib\\site-packages\\_pytest\\python.py:1641: in runtest\n    self.ihook.pytest_pyfunc_call(pyfuncitem=self)\n..\\..\\venv\\lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n..\\..\\venv\\lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npyfuncitem = <Function test_abc>\n\n    @hookimpl(trylast=True)\n    def pytest_pyfunc_call(pyfuncitem: \"Function\") -> Optional[object]:\n        testfunction = pyfuncitem.obj\n        if is_async_function(testfunction):\n            async_warn_and_skip(pyfuncitem.nodeid)\n        funcargs = pyfuncitem.funcargs\n        testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\n>       result = testfunction(**testargs)\nE       TypeError: TestExample.test_abc() takes 0 positional arguments but 1 was given\n\n..\\..\\venv\\lib\\site-packages\\_pytest\\python.py:183: TypeError"}, "start": 1643100291760, "stop": 1643100291760, "uuid": "90523972-5ea0-486a-b1e4-1bc650b40285", "historyId": "dd95127b26397f6a76c7c087556d7127", "testCaseId": "5d588f29b27d96d2e8205354215fd2df", "fullName": "mock_test.TestExample#test_abc", "labels": [{"name": "feature", "value": "测试样例1"}, {"name": "story", "value": "测试2"}, {"name": "tag", "value": "test03"}, {"name": "suite", "value": "mock_test"}, {"name": "subSuite", "value": "TestExample"}, {"name": "host", "value": "Ruix"}, {"name": "thread", "value": "17976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "mock_test"}]}