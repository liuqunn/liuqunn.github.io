# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import user_v1_user_pb2 as user__v1__user__pb2


class interfaceStub(object):
    """服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/quickGame.interface/Ping',
                request_serializer=user__v1__user__pb2.PingReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.PingReply.FromString,
                )
        self.AppInit = channel.unary_unary(
                '/quickGame.interface/AppInit',
                request_serializer=user__v1__user__pb2.InitReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.InitReply.FromString,
                )
        self.UserIdCardVerify = channel.unary_unary(
                '/quickGame.interface/UserIdCardVerify',
                request_serializer=user__v1__user__pb2.UserIdCardVerifyReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.UserIdCardVerifyReply.FromString,
                )
        self.UserGuestLogin = channel.unary_unary(
                '/quickGame.interface/UserGuestLogin',
                request_serializer=user__v1__user__pb2.UserGuestLoginReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.UserLoginTokenReply.FromString,
                )
        self.UserMiBinding = channel.unary_unary(
                '/quickGame.interface/UserMiBinding',
                request_serializer=user__v1__user__pb2.UserMiBindingReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.UserBindingReply.FromString,
                )
        self.UserGuestOverwrite = channel.unary_unary(
                '/quickGame.interface/UserGuestOverwrite',
                request_serializer=user__v1__user__pb2.UserGuestOverwriteReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.UserLoginTokenReply.FromString,
                )
        self.UserMobileBinding = channel.unary_unary(
                '/quickGame.interface/UserMobileBinding',
                request_serializer=user__v1__user__pb2.UserMobileBindingReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.UserBindingReply.FromString,
                )
        self.UserSmsBinding = channel.unary_unary(
                '/quickGame.interface/UserSmsBinding',
                request_serializer=user__v1__user__pb2.UserSmsBindingReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.UserSmsBindingReply.FromString,
                )
        self.UserSmsBindingAck = channel.unary_unary(
                '/quickGame.interface/UserSmsBindingAck',
                request_serializer=user__v1__user__pb2.UserSmsBindingAckReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.UserBindingReply.FromString,
                )
        self.VideoWallPage = channel.unary_unary(
                '/quickGame.interface/VideoWallPage',
                request_serializer=user__v1__user__pb2.VideoWallReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.VideoWallReply.FromString,
                )
        self.VideoWallLike = channel.unary_unary(
                '/quickGame.interface/VideoWallLike',
                request_serializer=user__v1__user__pb2.VideoWallLikeReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.DiscoverPage = channel.unary_unary(
                '/quickGame.interface/DiscoverPage',
                request_serializer=user__v1__user__pb2.DiscoverReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.DiscoverReply.FromString,
                )
        self.DiscoverPull = channel.unary_unary(
                '/quickGame.interface/DiscoverPull',
                request_serializer=user__v1__user__pb2.DiscoverPullReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.DiscoverReply.FromString,
                )
        self.GameCatePage = channel.unary_unary(
                '/quickGame.interface/GameCatePage',
                request_serializer=user__v1__user__pb2.GameCateReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GameCateReply.FromString,
                )
        self.GameCateDiscover = channel.unary_unary(
                '/quickGame.interface/GameCateDiscover',
                request_serializer=user__v1__user__pb2.DiscoverPullReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GameCateDiscoverReply.FromString,
                )
        self.GameTagPage = channel.unary_unary(
                '/quickGame.interface/GameTagPage',
                request_serializer=user__v1__user__pb2.GameTagPageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GameTagPageReply.FromString,
                )
        self.RankTopicPage = channel.unary_unary(
                '/quickGame.interface/RankTopicPage',
                request_serializer=user__v1__user__pb2.RankPageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.RankPageReply.FromString,
                )
        self.GameInfoPage = channel.unary_unary(
                '/quickGame.interface/GameInfoPage',
                request_serializer=user__v1__user__pb2.GameInfoReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GameInfoReply.FromString,
                )
        self.GameCommentTip = channel.unary_unary(
                '/quickGame.interface/GameCommentTip',
                request_serializer=user__v1__user__pb2.GameInfoReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GameCommentTipReply.FromString,
                )
        self.GameReserved = channel.unary_unary(
                '/quickGame.interface/GameReserved',
                request_serializer=user__v1__user__pb2.GameReservedReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.GameReservedRecord = channel.unary_unary(
                '/quickGame.interface/GameReservedRecord',
                request_serializer=user__v1__user__pb2.EmptyReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GameReservedRecordReply.FromString,
                )
        self.GamesMetaData = channel.unary_unary(
                '/quickGame.interface/GamesMetaData',
                request_serializer=user__v1__user__pb2.GamesMetaDataReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GamesMetaDataReply.FromString,
                )
        self.GameCommentPage = channel.unary_unary(
                '/quickGame.interface/GameCommentPage',
                request_serializer=user__v1__user__pb2.GameCommentReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GameCommentReply.FromString,
                )
        self.GameCommentLike = channel.unary_unary(
                '/quickGame.interface/GameCommentLike',
                request_serializer=user__v1__user__pb2.GameCommentLikeReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.GameCommentPost = channel.unary_unary(
                '/quickGame.interface/GameCommentPost',
                request_serializer=user__v1__user__pb2.GameCommentPostReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.GameArticlePage = channel.unary_unary(
                '/quickGame.interface/GameArticlePage',
                request_serializer=user__v1__user__pb2.GameArticlePageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GameArticlePageReply.FromString,
                )
        self.GameArticleInfo = channel.unary_unary(
                '/quickGame.interface/GameArticleInfo',
                request_serializer=user__v1__user__pb2.GameArticleInfoReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.GameArticleInfoReply.FromString,
                )
        self.GameArticleUseful = channel.unary_unary(
                '/quickGame.interface/GameArticleUseful',
                request_serializer=user__v1__user__pb2.GameArticleUsefulReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.PlayerHomePage = channel.unary_unary(
                '/quickGame.interface/PlayerHomePage',
                request_serializer=user__v1__user__pb2.PlayerHomeReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.PlayerHomeReply.FromString,
                )
        self.PlayerHomeGamePage = channel.unary_unary(
                '/quickGame.interface/PlayerHomeGamePage',
                request_serializer=user__v1__user__pb2.PlayerHomeGameReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.PlayerHomeGameReply.FromString,
                )
        self.PlayerHomeSpecialPage = channel.unary_unary(
                '/quickGame.interface/PlayerHomeSpecialPage',
                request_serializer=user__v1__user__pb2.PlayerHomeSpecialPageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.PlayerHomeSpecialPageReply.FromString,
                )
        self.PlayerHomeVideoPage = channel.unary_unary(
                '/quickGame.interface/PlayerHomeVideoPage',
                request_serializer=user__v1__user__pb2.PlayerHomeVideoPageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.PlayerHomeVideoPageReply.FromString,
                )
        self.SearchMainPage = channel.unary_unary(
                '/quickGame.interface/SearchMainPage',
                request_serializer=user__v1__user__pb2.EmptyReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.SearchMainPageReply.FromString,
                )
        self.SearchResultPage = channel.unary_unary(
                '/quickGame.interface/SearchResultPage',
                request_serializer=user__v1__user__pb2.SearchResultPageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.SearchResultPageReply.FromString,
                )
        self.SpecialPage = channel.unary_unary(
                '/quickGame.interface/SpecialPage',
                request_serializer=user__v1__user__pb2.SpecialPageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.SpecialPageReply.FromString,
                )
        self.SpecialInfoPage = channel.unary_unary(
                '/quickGame.interface/SpecialInfoPage',
                request_serializer=user__v1__user__pb2.SpecialInfoPageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.SpecialInfoPageReply.FromString,
                )
        self.SpecialInfoLike = channel.unary_unary(
                '/quickGame.interface/SpecialInfoLike',
                request_serializer=user__v1__user__pb2.SpecialInfoLikeReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.MyPage = channel.unary_unary(
                '/quickGame.interface/MyPage',
                request_serializer=user__v1__user__pb2.EmptyReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.MyPageReply.FromString,
                )
        self.MyPagePost = channel.unary_unary(
                '/quickGame.interface/MyPagePost',
                request_serializer=user__v1__user__pb2.MyPagePostReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.GameAddPost = channel.unary_unary(
                '/quickGame.interface/GameAddPost',
                request_serializer=user__v1__user__pb2.GameAddPostReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.FeedBackPost = channel.unary_unary(
                '/quickGame.interface/FeedBackPost',
                request_serializer=user__v1__user__pb2.FeedbackReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.FeedBackToastPost = channel.unary_unary(
                '/quickGame.interface/FeedBackToastPost',
                request_serializer=user__v1__user__pb2.FeedBackToastPostReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.GetUploadToken = channel.unary_unary(
                '/quickGame.interface/GetUploadToken',
                request_serializer=user__v1__user__pb2.EmptyReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.UploadTokenReply.FromString,
                )
        self.UploadVideo = channel.unary_unary(
                '/quickGame.interface/UploadVideo',
                request_serializer=user__v1__user__pb2.UploadVideoReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.UploadVideoList = channel.unary_unary(
                '/quickGame.interface/UploadVideoList',
                request_serializer=user__v1__user__pb2.UploadVideoListReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.UploadVideoListReply.FromString,
                )
        self.FishPondPage = channel.unary_unary(
                '/quickGame.interface/FishPondPage',
                request_serializer=user__v1__user__pb2.FishPondPageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.FishPondPageReply.FromString,
                )
        self.FishPondDrawCoin = channel.unary_unary(
                '/quickGame.interface/FishPondDrawCoin',
                request_serializer=user__v1__user__pb2.EmptyReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.FishPondDrawCoinReply.FromString,
                )
        self.FishPondDrawTask = channel.unary_unary(
                '/quickGame.interface/FishPondDrawTask',
                request_serializer=user__v1__user__pb2.FishPondDrawTaskReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.FishPondDrawTaskReply.FromString,
                )
        self.FishpondGoodsPage = channel.unary_unary(
                '/quickGame.interface/FishpondGoodsPage',
                request_serializer=user__v1__user__pb2.PageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.FishpondGoodsPageReply.FromString,
                )
        self.FishpondGoodsExchange = channel.unary_unary(
                '/quickGame.interface/FishpondGoodsExchange',
                request_serializer=user__v1__user__pb2.FishpondGoodsExchangeReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.FishpondGoodsRollback = channel.unary_unary(
                '/quickGame.interface/FishpondGoodsRollback',
                request_serializer=user__v1__user__pb2.FishpondGoodsRollbackReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.FishpondGoodsRecord = channel.unary_unary(
                '/quickGame.interface/FishpondGoodsRecord',
                request_serializer=user__v1__user__pb2.PageReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.FishpondGoodsRecordReply.FromString,
                )
        self.MetricsVideoPlay = channel.unary_unary(
                '/quickGame.interface/MetricsVideoPlay',
                request_serializer=user__v1__user__pb2.MetricsVideoPlayReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.MetricsGamePlay = channel.unary_unary(
                '/quickGame.interface/MetricsGamePlay',
                request_serializer=user__v1__user__pb2.MetricsGamePlayReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.MetricsAppTimer = channel.unary_unary(
                '/quickGame.interface/MetricsAppTimer',
                request_serializer=user__v1__user__pb2.MetricsAppTimerReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.MetricsSandbox = channel.unary_unary(
                '/quickGame.interface/MetricsSandbox',
                request_serializer=user__v1__user__pb2.MetricsSandboxReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.ApkCompatibility = channel.unary_unary(
                '/quickGame.interface/ApkCompatibility',
                request_serializer=user__v1__user__pb2.ApkCompatibilityReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ApkCompatibilityReply.FromString,
                )
        self.ApkCompatibilityReport = channel.unary_unary(
                '/quickGame.interface/ApkCompatibilityReport',
                request_serializer=user__v1__user__pb2.ApkCompatibilityReportReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.MetricsBadgeAlpha = channel.unary_unary(
                '/quickGame.interface/MetricsBadgeAlpha',
                request_serializer=user__v1__user__pb2.EmptyReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.EmptyReq.FromString,
                )
        self.Notice = channel.unary_unary(
                '/quickGame.interface/Notice',
                request_serializer=user__v1__user__pb2.NoticeReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.NoticeReply.FromString,
                )
        self.NoticeRm = channel.unary_unary(
                '/quickGame.interface/NoticeRm',
                request_serializer=user__v1__user__pb2.NoticeRmReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.MiAd = channel.unary_unary(
                '/quickGame.interface/MiAd',
                request_serializer=user__v1__user__pb2.MiAdReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.MiAdReply.FromString,
                )
        self.MetricsMiAd = channel.unary_unary(
                '/quickGame.interface/MetricsMiAd',
                request_serializer=user__v1__user__pb2.MetricsMiAdReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.DeeplinkCursor = channel.unary_unary(
                '/quickGame.interface/DeeplinkCursor',
                request_serializer=user__v1__user__pb2.DeeplinkCursorReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.ActionReply.FromString,
                )
        self.Task22014Tmp = channel.unary_unary(
                '/quickGame.interface/Task22014Tmp',
                request_serializer=user__v1__user__pb2.EmptyReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.Task22014TmpReply.FromString,
                )
        self.Task22014TmpPost = channel.unary_unary(
                '/quickGame.interface/Task22014TmpPost',
                request_serializer=user__v1__user__pb2.Task22014TmpPostReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.FishPondDrawTaskReply.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/quickGame.interface/Subscribe',
                request_serializer=user__v1__user__pb2.EmptyReq.SerializeToString,
                response_deserializer=user__v1__user__pb2.SubscribeReply.FromString,
                )


class interfaceServicer(object):
    """服务定义
    """

    def Ping(self, request, context):
        """调试 grpcurl -plaintext -d '' localhost:8180 quickGame.interface.Ping
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppInit(self, request, context):
        """初始化 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserIdCardVerify(self, request, context):
        """实名认证接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserGuestLogin(self, request, context):
        """游客账号登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserMiBinding(self, request, context):
        """小米账号绑定
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserGuestOverwrite(self, request, context):
        """游客账号覆盖登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserMobileBinding(self, request, context):
        """用户登录或注册 grpcurl -plaintext -d '{"token":"Go"}' localhost:8180 quickGame.interface.UserMobileLogin
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserSmsBinding(self, request, context):
        """绑定账号 请求登录的验证码 grpcurl -plaintext -d '{"mobile":"18612438810"}' localhost:8180 quickGame.interface.UserSmsLogin
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserSmsBindingAck(self, request, context):
        """验证 验证码是否有效 返回登录凭证
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VideoWallPage(self, request, context):
        """视频推荐页 grpcurl -plaintext -d '{"page":1}' localhost:8180 quickGame.interface.VideoWallPage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VideoWallLike(self, request, context):
        """视频点赞 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverPage(self, request, context):
        """发现页 grpcurl -plaintext  -d '{"page":"1"}' localhost:8180 quickGame.interface.DiscoverPage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverPull(self, request, context):
        """发现页换一换
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameCatePage(self, request, context):
        """游戏库 grpcurl -plaintext  localhost:8180 quickGame.interface.GameCatePage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameCateDiscover(self, request, context):
        """游戏库推荐页面 1.4.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameTagPage(self, request, context):
        """游戏库标签选择游戏 1.4.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RankTopicPage(self, request, context):
        """榜单专题页 grpcurl -plaintext  localhost:8180 quickGame.interface.RankTopicPage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameInfoPage(self, request, context):
        """游戏详情页 grpcurl -plaintext -d '{"gameId":1}' localhost:8180 quickGame.interface.GameInfoPage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameCommentTip(self, request, context):
        """游戏评分提示 v1.4.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameReserved(self, request, context):
        """游戏预约 v1.4.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameReservedRecord(self, request, context):
        """玩家游戏预约记录 v1.4.1 当本地未初始化过预约记录时请求
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GamesMetaData(self, request, context):
        """游戏元数据返回
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameCommentPage(self, request, context):
        """游戏详情页 grpcurl -plaintext -d '{"gameId":1}' localhost:8180 quickGame.interface.GameInfoPage
        rpc GameInfoStreamPage (stream GameInfoReq) returns (stream GameInfoReply){}

        游戏评论页 grpcurl -plaintext -d '{"gameId":1}' localhost:8180 quickGame.interface.GameCommentPage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameCommentLike(self, request, context):
        """游戏评论点赞 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameCommentPost(self, request, context):
        """游戏评论发布 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameArticlePage(self, request, context):
        """游戏文章列表页
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameArticleInfo(self, request, context):
        """游戏文章详情页
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameArticleUseful(self, request, context):
        """游戏文章是否有用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayerHomePage(self, request, context):
        """玩家个人主页 grpcurl -plaintext -d '{"page":1,"uid":9}' localhost:8180 quickGame.interface.PlayerHomePage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayerHomeGamePage(self, request, context):
        """玩家主页-游戏列表二级页
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayerHomeSpecialPage(self, request, context):
        """玩家主页-点赞过的专题
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayerHomeVideoPage(self, request, context):
        """玩家主页-点赞过的视频
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchMainPage(self, request, context):
        """搜索主页
        grpcurl -plaintext localhost:8180 quickGame.interface.SearchMainPage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchResultPage(self, request, context):
        """搜索结果页
        grpcurl -plaintext  -d '{"keyword":"aa"}' localhost:8180 quickGame.interface.SearchResultPage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpecialPage(self, request, context):
        """1.3.0 内容专题页 grpcurl -plaintext  localhost:8180 quickGame.interface.SpecialPage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpecialInfoPage(self, request, context):
        """1.3.0 内容专题详情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpecialInfoLike(self, request, context):
        """1.3.0 内容专题点赞 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyPage(self, request, context):
        """我的页面 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyPagePost(self, request, context):
        """我的资料更新 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameAddPost(self, request, context):
        """游戏补足提交 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeedBackPost(self, request, context):
        """问题反馈 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeedBackToastPost(self, request, context):
        """问题反馈弹框类型的 pb_test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUploadToken(self, request, context):
        """获取上传token 有并发数100限制， 需要缓存到本地 默认15分钟过期
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadVideo(self, request, context):
        """上传视频接口（保存视频）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadVideoList(self, request, context):
        """上传视频的列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FishPondPage(self, request, context):
        """鱼塘  grpcurl -plaintext -d '{"token":"34.cczjcuogv93ce00i4arofn27cxesiiuw"}' localhost:8180 quickGame.interface.FishPondPage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FishPondDrawCoin(self, request, context):
        """鱼塘 领取金币
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FishPondDrawTask(self, request, context):
        """鱼塘 做任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FishpondGoodsPage(self, request, context):
        """鱼塘商品页面 v1.5.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FishpondGoodsExchange(self, request, context):
        """鱼塘兑换接口 v1.5.0  错误码 101：金币不足， 102：库存不足
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FishpondGoodsRollback(self, request, context):
        """鱼塘兑换撤销 v1.5.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FishpondGoodsRecord(self, request, context):
        """鱼塘兑换记录 v1.5.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetricsVideoPlay(self, request, context):
        """标上报
        视频播放指标上报
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetricsGamePlay(self, request, context):
        """游戏游玩指标上报
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetricsAppTimer(self, request, context):
        """用户停留app里时长上报
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetricsSandbox(self, request, context):
        """补丁应用指标上报
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApkCompatibility(self, request, context):
        """应用兼容性测试
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApkCompatibilityReport(self, request, context):
        """上报兼容性测试数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetricsBadgeAlpha(self, request, context):
        """徽章上报的统计数据 v1.3.1临时用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Notice(self, request, context):
        """消息通知 v1.5.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NoticeRm(self, request, context):
        """消息删除 v1.5.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MiAd(self, request, context):
        """小米广告配置拉取 v1.5.2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetricsMiAd(self, request, context):
        """小米广告打点 1.5.2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeeplinkCursor(self, request, context):
        """deeplink的归因保存
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Task22014Tmp(self, request, context):
        """春节任务活动
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Task22014TmpPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """订阅长链接
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_interfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=user__v1__user__pb2.PingReq.FromString,
                    response_serializer=user__v1__user__pb2.PingReply.SerializeToString,
            ),
            'AppInit': grpc.unary_unary_rpc_method_handler(
                    servicer.AppInit,
                    request_deserializer=user__v1__user__pb2.InitReq.FromString,
                    response_serializer=user__v1__user__pb2.InitReply.SerializeToString,
            ),
            'UserIdCardVerify': grpc.unary_unary_rpc_method_handler(
                    servicer.UserIdCardVerify,
                    request_deserializer=user__v1__user__pb2.UserIdCardVerifyReq.FromString,
                    response_serializer=user__v1__user__pb2.UserIdCardVerifyReply.SerializeToString,
            ),
            'UserGuestLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.UserGuestLogin,
                    request_deserializer=user__v1__user__pb2.UserGuestLoginReq.FromString,
                    response_serializer=user__v1__user__pb2.UserLoginTokenReply.SerializeToString,
            ),
            'UserMiBinding': grpc.unary_unary_rpc_method_handler(
                    servicer.UserMiBinding,
                    request_deserializer=user__v1__user__pb2.UserMiBindingReq.FromString,
                    response_serializer=user__v1__user__pb2.UserBindingReply.SerializeToString,
            ),
            'UserGuestOverwrite': grpc.unary_unary_rpc_method_handler(
                    servicer.UserGuestOverwrite,
                    request_deserializer=user__v1__user__pb2.UserGuestOverwriteReq.FromString,
                    response_serializer=user__v1__user__pb2.UserLoginTokenReply.SerializeToString,
            ),
            'UserMobileBinding': grpc.unary_unary_rpc_method_handler(
                    servicer.UserMobileBinding,
                    request_deserializer=user__v1__user__pb2.UserMobileBindingReq.FromString,
                    response_serializer=user__v1__user__pb2.UserBindingReply.SerializeToString,
            ),
            'UserSmsBinding': grpc.unary_unary_rpc_method_handler(
                    servicer.UserSmsBinding,
                    request_deserializer=user__v1__user__pb2.UserSmsBindingReq.FromString,
                    response_serializer=user__v1__user__pb2.UserSmsBindingReply.SerializeToString,
            ),
            'UserSmsBindingAck': grpc.unary_unary_rpc_method_handler(
                    servicer.UserSmsBindingAck,
                    request_deserializer=user__v1__user__pb2.UserSmsBindingAckReq.FromString,
                    response_serializer=user__v1__user__pb2.UserBindingReply.SerializeToString,
            ),
            'VideoWallPage': grpc.unary_unary_rpc_method_handler(
                    servicer.VideoWallPage,
                    request_deserializer=user__v1__user__pb2.VideoWallReq.FromString,
                    response_serializer=user__v1__user__pb2.VideoWallReply.SerializeToString,
            ),
            'VideoWallLike': grpc.unary_unary_rpc_method_handler(
                    servicer.VideoWallLike,
                    request_deserializer=user__v1__user__pb2.VideoWallLikeReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'DiscoverPage': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverPage,
                    request_deserializer=user__v1__user__pb2.DiscoverReq.FromString,
                    response_serializer=user__v1__user__pb2.DiscoverReply.SerializeToString,
            ),
            'DiscoverPull': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverPull,
                    request_deserializer=user__v1__user__pb2.DiscoverPullReq.FromString,
                    response_serializer=user__v1__user__pb2.DiscoverReply.SerializeToString,
            ),
            'GameCatePage': grpc.unary_unary_rpc_method_handler(
                    servicer.GameCatePage,
                    request_deserializer=user__v1__user__pb2.GameCateReq.FromString,
                    response_serializer=user__v1__user__pb2.GameCateReply.SerializeToString,
            ),
            'GameCateDiscover': grpc.unary_unary_rpc_method_handler(
                    servicer.GameCateDiscover,
                    request_deserializer=user__v1__user__pb2.DiscoverPullReq.FromString,
                    response_serializer=user__v1__user__pb2.GameCateDiscoverReply.SerializeToString,
            ),
            'GameTagPage': grpc.unary_unary_rpc_method_handler(
                    servicer.GameTagPage,
                    request_deserializer=user__v1__user__pb2.GameTagPageReq.FromString,
                    response_serializer=user__v1__user__pb2.GameTagPageReply.SerializeToString,
            ),
            'RankTopicPage': grpc.unary_unary_rpc_method_handler(
                    servicer.RankTopicPage,
                    request_deserializer=user__v1__user__pb2.RankPageReq.FromString,
                    response_serializer=user__v1__user__pb2.RankPageReply.SerializeToString,
            ),
            'GameInfoPage': grpc.unary_unary_rpc_method_handler(
                    servicer.GameInfoPage,
                    request_deserializer=user__v1__user__pb2.GameInfoReq.FromString,
                    response_serializer=user__v1__user__pb2.GameInfoReply.SerializeToString,
            ),
            'GameCommentTip': grpc.unary_unary_rpc_method_handler(
                    servicer.GameCommentTip,
                    request_deserializer=user__v1__user__pb2.GameInfoReq.FromString,
                    response_serializer=user__v1__user__pb2.GameCommentTipReply.SerializeToString,
            ),
            'GameReserved': grpc.unary_unary_rpc_method_handler(
                    servicer.GameReserved,
                    request_deserializer=user__v1__user__pb2.GameReservedReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'GameReservedRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.GameReservedRecord,
                    request_deserializer=user__v1__user__pb2.EmptyReq.FromString,
                    response_serializer=user__v1__user__pb2.GameReservedRecordReply.SerializeToString,
            ),
            'GamesMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.GamesMetaData,
                    request_deserializer=user__v1__user__pb2.GamesMetaDataReq.FromString,
                    response_serializer=user__v1__user__pb2.GamesMetaDataReply.SerializeToString,
            ),
            'GameCommentPage': grpc.unary_unary_rpc_method_handler(
                    servicer.GameCommentPage,
                    request_deserializer=user__v1__user__pb2.GameCommentReq.FromString,
                    response_serializer=user__v1__user__pb2.GameCommentReply.SerializeToString,
            ),
            'GameCommentLike': grpc.unary_unary_rpc_method_handler(
                    servicer.GameCommentLike,
                    request_deserializer=user__v1__user__pb2.GameCommentLikeReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'GameCommentPost': grpc.unary_unary_rpc_method_handler(
                    servicer.GameCommentPost,
                    request_deserializer=user__v1__user__pb2.GameCommentPostReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'GameArticlePage': grpc.unary_unary_rpc_method_handler(
                    servicer.GameArticlePage,
                    request_deserializer=user__v1__user__pb2.GameArticlePageReq.FromString,
                    response_serializer=user__v1__user__pb2.GameArticlePageReply.SerializeToString,
            ),
            'GameArticleInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GameArticleInfo,
                    request_deserializer=user__v1__user__pb2.GameArticleInfoReq.FromString,
                    response_serializer=user__v1__user__pb2.GameArticleInfoReply.SerializeToString,
            ),
            'GameArticleUseful': grpc.unary_unary_rpc_method_handler(
                    servicer.GameArticleUseful,
                    request_deserializer=user__v1__user__pb2.GameArticleUsefulReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'PlayerHomePage': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayerHomePage,
                    request_deserializer=user__v1__user__pb2.PlayerHomeReq.FromString,
                    response_serializer=user__v1__user__pb2.PlayerHomeReply.SerializeToString,
            ),
            'PlayerHomeGamePage': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayerHomeGamePage,
                    request_deserializer=user__v1__user__pb2.PlayerHomeGameReq.FromString,
                    response_serializer=user__v1__user__pb2.PlayerHomeGameReply.SerializeToString,
            ),
            'PlayerHomeSpecialPage': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayerHomeSpecialPage,
                    request_deserializer=user__v1__user__pb2.PlayerHomeSpecialPageReq.FromString,
                    response_serializer=user__v1__user__pb2.PlayerHomeSpecialPageReply.SerializeToString,
            ),
            'PlayerHomeVideoPage': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayerHomeVideoPage,
                    request_deserializer=user__v1__user__pb2.PlayerHomeVideoPageReq.FromString,
                    response_serializer=user__v1__user__pb2.PlayerHomeVideoPageReply.SerializeToString,
            ),
            'SearchMainPage': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchMainPage,
                    request_deserializer=user__v1__user__pb2.EmptyReq.FromString,
                    response_serializer=user__v1__user__pb2.SearchMainPageReply.SerializeToString,
            ),
            'SearchResultPage': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchResultPage,
                    request_deserializer=user__v1__user__pb2.SearchResultPageReq.FromString,
                    response_serializer=user__v1__user__pb2.SearchResultPageReply.SerializeToString,
            ),
            'SpecialPage': grpc.unary_unary_rpc_method_handler(
                    servicer.SpecialPage,
                    request_deserializer=user__v1__user__pb2.SpecialPageReq.FromString,
                    response_serializer=user__v1__user__pb2.SpecialPageReply.SerializeToString,
            ),
            'SpecialInfoPage': grpc.unary_unary_rpc_method_handler(
                    servicer.SpecialInfoPage,
                    request_deserializer=user__v1__user__pb2.SpecialInfoPageReq.FromString,
                    response_serializer=user__v1__user__pb2.SpecialInfoPageReply.SerializeToString,
            ),
            'SpecialInfoLike': grpc.unary_unary_rpc_method_handler(
                    servicer.SpecialInfoLike,
                    request_deserializer=user__v1__user__pb2.SpecialInfoLikeReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'MyPage': grpc.unary_unary_rpc_method_handler(
                    servicer.MyPage,
                    request_deserializer=user__v1__user__pb2.EmptyReq.FromString,
                    response_serializer=user__v1__user__pb2.MyPageReply.SerializeToString,
            ),
            'MyPagePost': grpc.unary_unary_rpc_method_handler(
                    servicer.MyPagePost,
                    request_deserializer=user__v1__user__pb2.MyPagePostReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'GameAddPost': grpc.unary_unary_rpc_method_handler(
                    servicer.GameAddPost,
                    request_deserializer=user__v1__user__pb2.GameAddPostReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'FeedBackPost': grpc.unary_unary_rpc_method_handler(
                    servicer.FeedBackPost,
                    request_deserializer=user__v1__user__pb2.FeedbackReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'FeedBackToastPost': grpc.unary_unary_rpc_method_handler(
                    servicer.FeedBackToastPost,
                    request_deserializer=user__v1__user__pb2.FeedBackToastPostReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'GetUploadToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUploadToken,
                    request_deserializer=user__v1__user__pb2.EmptyReq.FromString,
                    response_serializer=user__v1__user__pb2.UploadTokenReply.SerializeToString,
            ),
            'UploadVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadVideo,
                    request_deserializer=user__v1__user__pb2.UploadVideoReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'UploadVideoList': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadVideoList,
                    request_deserializer=user__v1__user__pb2.UploadVideoListReq.FromString,
                    response_serializer=user__v1__user__pb2.UploadVideoListReply.SerializeToString,
            ),
            'FishPondPage': grpc.unary_unary_rpc_method_handler(
                    servicer.FishPondPage,
                    request_deserializer=user__v1__user__pb2.FishPondPageReq.FromString,
                    response_serializer=user__v1__user__pb2.FishPondPageReply.SerializeToString,
            ),
            'FishPondDrawCoin': grpc.unary_unary_rpc_method_handler(
                    servicer.FishPondDrawCoin,
                    request_deserializer=user__v1__user__pb2.EmptyReq.FromString,
                    response_serializer=user__v1__user__pb2.FishPondDrawCoinReply.SerializeToString,
            ),
            'FishPondDrawTask': grpc.unary_unary_rpc_method_handler(
                    servicer.FishPondDrawTask,
                    request_deserializer=user__v1__user__pb2.FishPondDrawTaskReq.FromString,
                    response_serializer=user__v1__user__pb2.FishPondDrawTaskReply.SerializeToString,
            ),
            'FishpondGoodsPage': grpc.unary_unary_rpc_method_handler(
                    servicer.FishpondGoodsPage,
                    request_deserializer=user__v1__user__pb2.PageReq.FromString,
                    response_serializer=user__v1__user__pb2.FishpondGoodsPageReply.SerializeToString,
            ),
            'FishpondGoodsExchange': grpc.unary_unary_rpc_method_handler(
                    servicer.FishpondGoodsExchange,
                    request_deserializer=user__v1__user__pb2.FishpondGoodsExchangeReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'FishpondGoodsRollback': grpc.unary_unary_rpc_method_handler(
                    servicer.FishpondGoodsRollback,
                    request_deserializer=user__v1__user__pb2.FishpondGoodsRollbackReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'FishpondGoodsRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.FishpondGoodsRecord,
                    request_deserializer=user__v1__user__pb2.PageReq.FromString,
                    response_serializer=user__v1__user__pb2.FishpondGoodsRecordReply.SerializeToString,
            ),
            'MetricsVideoPlay': grpc.unary_unary_rpc_method_handler(
                    servicer.MetricsVideoPlay,
                    request_deserializer=user__v1__user__pb2.MetricsVideoPlayReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'MetricsGamePlay': grpc.unary_unary_rpc_method_handler(
                    servicer.MetricsGamePlay,
                    request_deserializer=user__v1__user__pb2.MetricsGamePlayReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'MetricsAppTimer': grpc.unary_unary_rpc_method_handler(
                    servicer.MetricsAppTimer,
                    request_deserializer=user__v1__user__pb2.MetricsAppTimerReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'MetricsSandbox': grpc.unary_unary_rpc_method_handler(
                    servicer.MetricsSandbox,
                    request_deserializer=user__v1__user__pb2.MetricsSandboxReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'ApkCompatibility': grpc.unary_unary_rpc_method_handler(
                    servicer.ApkCompatibility,
                    request_deserializer=user__v1__user__pb2.ApkCompatibilityReq.FromString,
                    response_serializer=user__v1__user__pb2.ApkCompatibilityReply.SerializeToString,
            ),
            'ApkCompatibilityReport': grpc.unary_unary_rpc_method_handler(
                    servicer.ApkCompatibilityReport,
                    request_deserializer=user__v1__user__pb2.ApkCompatibilityReportReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'MetricsBadgeAlpha': grpc.unary_unary_rpc_method_handler(
                    servicer.MetricsBadgeAlpha,
                    request_deserializer=user__v1__user__pb2.EmptyReq.FromString,
                    response_serializer=user__v1__user__pb2.EmptyReq.SerializeToString,
            ),
            'Notice': grpc.unary_unary_rpc_method_handler(
                    servicer.Notice,
                    request_deserializer=user__v1__user__pb2.NoticeReq.FromString,
                    response_serializer=user__v1__user__pb2.NoticeReply.SerializeToString,
            ),
            'NoticeRm': grpc.unary_unary_rpc_method_handler(
                    servicer.NoticeRm,
                    request_deserializer=user__v1__user__pb2.NoticeRmReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'MiAd': grpc.unary_unary_rpc_method_handler(
                    servicer.MiAd,
                    request_deserializer=user__v1__user__pb2.MiAdReq.FromString,
                    response_serializer=user__v1__user__pb2.MiAdReply.SerializeToString,
            ),
            'MetricsMiAd': grpc.unary_unary_rpc_method_handler(
                    servicer.MetricsMiAd,
                    request_deserializer=user__v1__user__pb2.MetricsMiAdReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'DeeplinkCursor': grpc.unary_unary_rpc_method_handler(
                    servicer.DeeplinkCursor,
                    request_deserializer=user__v1__user__pb2.DeeplinkCursorReq.FromString,
                    response_serializer=user__v1__user__pb2.ActionReply.SerializeToString,
            ),
            'Task22014Tmp': grpc.unary_unary_rpc_method_handler(
                    servicer.Task22014Tmp,
                    request_deserializer=user__v1__user__pb2.EmptyReq.FromString,
                    response_serializer=user__v1__user__pb2.Task22014TmpReply.SerializeToString,
            ),
            'Task22014TmpPost': grpc.unary_unary_rpc_method_handler(
                    servicer.Task22014TmpPost,
                    request_deserializer=user__v1__user__pb2.Task22014TmpPostReq.FromString,
                    response_serializer=user__v1__user__pb2.FishPondDrawTaskReply.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=user__v1__user__pb2.EmptyReq.FromString,
                    response_serializer=user__v1__user__pb2.SubscribeReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quickGame.interface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class interface(object):
    """服务定义
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/Ping',
            user__v1__user__pb2.PingReq.SerializeToString,
            user__v1__user__pb2.PingReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppInit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/AppInit',
            user__v1__user__pb2.InitReq.SerializeToString,
            user__v1__user__pb2.InitReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserIdCardVerify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/UserIdCardVerify',
            user__v1__user__pb2.UserIdCardVerifyReq.SerializeToString,
            user__v1__user__pb2.UserIdCardVerifyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserGuestLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/UserGuestLogin',
            user__v1__user__pb2.UserGuestLoginReq.SerializeToString,
            user__v1__user__pb2.UserLoginTokenReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserMiBinding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/UserMiBinding',
            user__v1__user__pb2.UserMiBindingReq.SerializeToString,
            user__v1__user__pb2.UserBindingReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserGuestOverwrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/UserGuestOverwrite',
            user__v1__user__pb2.UserGuestOverwriteReq.SerializeToString,
            user__v1__user__pb2.UserLoginTokenReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserMobileBinding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/UserMobileBinding',
            user__v1__user__pb2.UserMobileBindingReq.SerializeToString,
            user__v1__user__pb2.UserBindingReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserSmsBinding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/UserSmsBinding',
            user__v1__user__pb2.UserSmsBindingReq.SerializeToString,
            user__v1__user__pb2.UserSmsBindingReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserSmsBindingAck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/UserSmsBindingAck',
            user__v1__user__pb2.UserSmsBindingAckReq.SerializeToString,
            user__v1__user__pb2.UserBindingReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VideoWallPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/VideoWallPage',
            user__v1__user__pb2.VideoWallReq.SerializeToString,
            user__v1__user__pb2.VideoWallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VideoWallLike(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/VideoWallLike',
            user__v1__user__pb2.VideoWallLikeReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/DiscoverPage',
            user__v1__user__pb2.DiscoverReq.SerializeToString,
            user__v1__user__pb2.DiscoverReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverPull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/DiscoverPull',
            user__v1__user__pb2.DiscoverPullReq.SerializeToString,
            user__v1__user__pb2.DiscoverReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameCatePage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameCatePage',
            user__v1__user__pb2.GameCateReq.SerializeToString,
            user__v1__user__pb2.GameCateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameCateDiscover(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameCateDiscover',
            user__v1__user__pb2.DiscoverPullReq.SerializeToString,
            user__v1__user__pb2.GameCateDiscoverReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameTagPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameTagPage',
            user__v1__user__pb2.GameTagPageReq.SerializeToString,
            user__v1__user__pb2.GameTagPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RankTopicPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/RankTopicPage',
            user__v1__user__pb2.RankPageReq.SerializeToString,
            user__v1__user__pb2.RankPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameInfoPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameInfoPage',
            user__v1__user__pb2.GameInfoReq.SerializeToString,
            user__v1__user__pb2.GameInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameCommentTip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameCommentTip',
            user__v1__user__pb2.GameInfoReq.SerializeToString,
            user__v1__user__pb2.GameCommentTipReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameReserved(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameReserved',
            user__v1__user__pb2.GameReservedReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameReservedRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameReservedRecord',
            user__v1__user__pb2.EmptyReq.SerializeToString,
            user__v1__user__pb2.GameReservedRecordReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GamesMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GamesMetaData',
            user__v1__user__pb2.GamesMetaDataReq.SerializeToString,
            user__v1__user__pb2.GamesMetaDataReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameCommentPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameCommentPage',
            user__v1__user__pb2.GameCommentReq.SerializeToString,
            user__v1__user__pb2.GameCommentReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameCommentLike(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameCommentLike',
            user__v1__user__pb2.GameCommentLikeReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameCommentPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameCommentPost',
            user__v1__user__pb2.GameCommentPostReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameArticlePage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameArticlePage',
            user__v1__user__pb2.GameArticlePageReq.SerializeToString,
            user__v1__user__pb2.GameArticlePageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameArticleInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameArticleInfo',
            user__v1__user__pb2.GameArticleInfoReq.SerializeToString,
            user__v1__user__pb2.GameArticleInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameArticleUseful(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameArticleUseful',
            user__v1__user__pb2.GameArticleUsefulReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlayerHomePage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/PlayerHomePage',
            user__v1__user__pb2.PlayerHomeReq.SerializeToString,
            user__v1__user__pb2.PlayerHomeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlayerHomeGamePage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/PlayerHomeGamePage',
            user__v1__user__pb2.PlayerHomeGameReq.SerializeToString,
            user__v1__user__pb2.PlayerHomeGameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlayerHomeSpecialPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/PlayerHomeSpecialPage',
            user__v1__user__pb2.PlayerHomeSpecialPageReq.SerializeToString,
            user__v1__user__pb2.PlayerHomeSpecialPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlayerHomeVideoPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/PlayerHomeVideoPage',
            user__v1__user__pb2.PlayerHomeVideoPageReq.SerializeToString,
            user__v1__user__pb2.PlayerHomeVideoPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchMainPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/SearchMainPage',
            user__v1__user__pb2.EmptyReq.SerializeToString,
            user__v1__user__pb2.SearchMainPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchResultPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/SearchResultPage',
            user__v1__user__pb2.SearchResultPageReq.SerializeToString,
            user__v1__user__pb2.SearchResultPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpecialPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/SpecialPage',
            user__v1__user__pb2.SpecialPageReq.SerializeToString,
            user__v1__user__pb2.SpecialPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpecialInfoPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/SpecialInfoPage',
            user__v1__user__pb2.SpecialInfoPageReq.SerializeToString,
            user__v1__user__pb2.SpecialInfoPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpecialInfoLike(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/SpecialInfoLike',
            user__v1__user__pb2.SpecialInfoLikeReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/MyPage',
            user__v1__user__pb2.EmptyReq.SerializeToString,
            user__v1__user__pb2.MyPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyPagePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/MyPagePost',
            user__v1__user__pb2.MyPagePostReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GameAddPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GameAddPost',
            user__v1__user__pb2.GameAddPostReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeedBackPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/FeedBackPost',
            user__v1__user__pb2.FeedbackReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeedBackToastPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/FeedBackToastPost',
            user__v1__user__pb2.FeedBackToastPostReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUploadToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/GetUploadToken',
            user__v1__user__pb2.EmptyReq.SerializeToString,
            user__v1__user__pb2.UploadTokenReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/UploadVideo',
            user__v1__user__pb2.UploadVideoReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadVideoList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/UploadVideoList',
            user__v1__user__pb2.UploadVideoListReq.SerializeToString,
            user__v1__user__pb2.UploadVideoListReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FishPondPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/FishPondPage',
            user__v1__user__pb2.FishPondPageReq.SerializeToString,
            user__v1__user__pb2.FishPondPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FishPondDrawCoin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/FishPondDrawCoin',
            user__v1__user__pb2.EmptyReq.SerializeToString,
            user__v1__user__pb2.FishPondDrawCoinReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FishPondDrawTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/FishPondDrawTask',
            user__v1__user__pb2.FishPondDrawTaskReq.SerializeToString,
            user__v1__user__pb2.FishPondDrawTaskReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FishpondGoodsPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/FishpondGoodsPage',
            user__v1__user__pb2.PageReq.SerializeToString,
            user__v1__user__pb2.FishpondGoodsPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FishpondGoodsExchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/FishpondGoodsExchange',
            user__v1__user__pb2.FishpondGoodsExchangeReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FishpondGoodsRollback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/FishpondGoodsRollback',
            user__v1__user__pb2.FishpondGoodsRollbackReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FishpondGoodsRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/FishpondGoodsRecord',
            user__v1__user__pb2.PageReq.SerializeToString,
            user__v1__user__pb2.FishpondGoodsRecordReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MetricsVideoPlay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/MetricsVideoPlay',
            user__v1__user__pb2.MetricsVideoPlayReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MetricsGamePlay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/MetricsGamePlay',
            user__v1__user__pb2.MetricsGamePlayReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MetricsAppTimer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/MetricsAppTimer',
            user__v1__user__pb2.MetricsAppTimerReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MetricsSandbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/MetricsSandbox',
            user__v1__user__pb2.MetricsSandboxReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApkCompatibility(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/ApkCompatibility',
            user__v1__user__pb2.ApkCompatibilityReq.SerializeToString,
            user__v1__user__pb2.ApkCompatibilityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApkCompatibilityReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/ApkCompatibilityReport',
            user__v1__user__pb2.ApkCompatibilityReportReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MetricsBadgeAlpha(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/MetricsBadgeAlpha',
            user__v1__user__pb2.EmptyReq.SerializeToString,
            user__v1__user__pb2.EmptyReq.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Notice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/Notice',
            user__v1__user__pb2.NoticeReq.SerializeToString,
            user__v1__user__pb2.NoticeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NoticeRm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/NoticeRm',
            user__v1__user__pb2.NoticeRmReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MiAd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/MiAd',
            user__v1__user__pb2.MiAdReq.SerializeToString,
            user__v1__user__pb2.MiAdReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MetricsMiAd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/MetricsMiAd',
            user__v1__user__pb2.MetricsMiAdReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeeplinkCursor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/DeeplinkCursor',
            user__v1__user__pb2.DeeplinkCursorReq.SerializeToString,
            user__v1__user__pb2.ActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Task22014Tmp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/Task22014Tmp',
            user__v1__user__pb2.EmptyReq.SerializeToString,
            user__v1__user__pb2.Task22014TmpReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Task22014TmpPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quickGame.interface/Task22014TmpPost',
            user__v1__user__pb2.Task22014TmpPostReq.SerializeToString,
            user__v1__user__pb2.FishPondDrawTaskReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/quickGame.interface/Subscribe',
            user__v1__user__pb2.EmptyReq.SerializeToString,
            user__v1__user__pb2.SubscribeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
